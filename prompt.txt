@workspace

Freelancer API - Optimized Data Collection Plan
Authentication
All endpoints require OAuth2 token in Authorization header
Format: Authorization: Bearer YOUR_TOKEN
1. Retrieve Bids with Project and Client Data
Endpoint: /projects/0.1/bids/
Method: GET
Purpose: Collects your bid data plus basic project and client information in one call

Parameters:
bidders[]: number[] - Your user ID - Example: [12345678]
from_time: number - Start timestamp (e.g., month start) - Example: 1620000000
to_time: number - End timestamp (e.g., month end) - Example: 1622000000
project_details: boolean - Set to true - Example: true
user_details: boolean - Set to true - Example: true
limit: number - Results per page - Example: 50
offset: number - Pagination offset - Example: 0
Response:
{
"status": "success",
"result": {
"bids": [
{
"id": 123456789, // number - Bid ID
"project_id": 39331419, // number - Project ID
"project_owner_id": 87654321, // number - Client ID
"amount": 250.00, // number - Bid amount
"time_submitted": 1620123456, // number - Bid submission time
"time_awarded": 1620234567, // number - Award time (null if not awarded)
"award_status": "awarded", // string - (awarded|rejected|revoked|pending|canceled)
"paid_status": "partly_paid", // string - Payment status
"complete_status": "pending", // string - Completion status
"shortlisted": true, // boolean - If shortlisted
"score": 0.85, // number - Bid score
"paid_amount": 100.00 // number - Amount paid so far
}
],
"projects": {
"39331419": {
"id": 39331419, // number - Project ID
"title": "Build a Website", // string - Project title (for display)
"seo_url": "build-website-123", // string - SEO URL (not needed as per requirement)
"time_submitted": 1620000000 // number - Project creation time
}
},
"users": {
"87654321": {
"id": 87654321, // number - Client ID
"username": "techsolutions", // string - Username (for profile URL)
"display_name": "TechSolutions" // string - Display name (clickable in UI)
}
}
}
}

2. Fetch Missing Project Details
Endpoint: /projects/0.1/projects/
Method: GET
Purpose: Gets additional project information not included in the bids response

Parameters:
projects[]: number[] - Project IDs from first call - Example: [39331419, 39331420]
job_details: boolean - Set to true - Example: true
Response:
{
"status": "success",
"result": {
"projects": {
"39331419": {
// Only the new fields not already in bids response:
"type": "fixed", // string - Project type (fixed|hourly)
"hireme": false, // boolean - If recruiter project
"minimum_budget": 100, // number - Min budget
"maximum_budget": 500, // number - Max budget
"bid_stats": { // object - Bid statistics
"bid_count": 15, // number - Total bids
"avg_bid": 250 // number - Average bid
},
"jobs": [ // array - Skills needed
{
"name": "PHP" // string - Skill name
},
{
"name": "JavaScript" // string - Skill name
}
]
}
}
}
}

3. Retrieve Thread Information
Endpoint: /messages/0.1/threads/
Method: GET
Purpose: Gets conversation threads related to your bid projects

Parameters:
contexts[]: number[] - Project IDs from bids - Example: [39331419, 39331420]
context_type: string - Always "project" - Example: "project"
last_message: boolean - Set to true - Example: true
context_details: boolean - Set to false (not needed) - Example: false
Response:
{
"status": "success",
"result": {
"threads": [
{
"id": 987654321, // number - Thread ID
"thread_type": "private_chat", // string - Thread type
"time_created": 1620100000, // number - Time of first contact (important)
"context": {
"id": 39331419, // number - Project ID (to match with bids)
"type": "project" // string - Context type
},
"message": { // object - First/last message info
"time_created": 1620100500, // number - Message timestamp
"message": "Thanks for your bid..." // string - Message content
}
}
]
}
}

4. Check Payment Details
Endpoint: /projects/0.1/milestones/
Method: GET
Purpose: Retrieves milestone payment information for awarded bids

Parameters:
bids[]: number[] - Only awarded bid IDs - Example: [123456789, 123456790]
Response:
{
"status": "success",
"result": {
"milestones": [
{
"transaction_id": 987654, // number - Milestone ID
"bid_id": 123456789, // number - Associated bid ID (to match with bids)
"project_id": 39331419, // number - Project ID
"amount": 250.00, // number - Payment amount
"status": "cleared", // string - Status
"time_created": 1620500000 // number - Creation timestamp
}
]
}
}

5. Get Complete Client Profiles (if needed)
Endpoint: /users/0.1/users/
Method: GET
Purpose: Retrieves detailed client information when not available from previous calls

Parameters:
users[]: number[] - Client IDs from bids - Example: [87654321, 87654322]
reputation: boolean - Set to false (not needed for clients) - Example: false
employer_reputation: boolean - Set to true - Example: true
location_details: boolean - Set to true - Example: true
status: boolean - Set to true - Example: true
Response:
{
"status": "success",
"result": {
"users": {
"87654321": {
"location": { // object - Client location
"country": {
"name": "Australia" // string - Country name
}
},
"status": { // object - Verification info
"payment_verified": true, // boolean - Payment verification
"identity_verified": false // boolean - Identity verification
},
"employer_reputation": { // object - Client ratings
"entire_history": {
"overall": 4.8, // number - Overall rating
"on_budget": 4.9, // number - Budget rating
"on_time": 4.7, // number - Time rating
"earnings": 50000, // number - Total spent
"complete": 25, // number - Projects completed
"reviews": 20 // number - Reviews received
}
}
}
}
}
}

Data Integration Strategy
Primary Table Fields (One row per bid):
bid_id: From bids.id
project_id: From bids.project_id
project_title: From projects[project_id].title
project_url: Constructed as "freelancer.com/projects/[project_id]"
project_created: From projects[project_id].time_submitted
bid_amount: From bids.amount
bid_time: From bids.time_submitted
award_status: From bids.award_status
awarded_time: From bids.time_awarded (if available)
paid_amount: From bids.paid_amount
client_id: From bids.project_owner_id
client_name: From users[client_id].display_name
client_url: Constructed as "freelancer.com/u/[users[client_id].username]"
project_type: From projects endpoint - "fixed" or "hourly"
recruiter_project: From projects endpoint - hireme field
min_budget: From projects endpoint
max_budget: From projects endpoint
total_bids: From projects endpoint - bid_stats.bid_count
avg_bid: From projects endpoint - bid_stats.avg_bid
skills: Joined array of project job names from projects endpoint
bid_proposal_link: Constructed as "freelancer.com/projects/[project_id]/proposals"
received_response: Boolean - True if project_id exists in threads context.id
response_time: If received_response, calculate (thread.time_created - bid.time_submitted)
first_message_time: From thread.time_created
client_country: From users endpoint - location.country.name
client_rating: From users endpoint - employer_reputation.entire_history.overall
client_payment_verified: From users endpoint - status.payment_verified
milestones: Array of {amount, time_created} from milestones endpoint
total_milestone_amount: Sum of all milestone amounts for the bid_id
Optimizing API Calls:
First request gets all bids with basic project and client info
Second request gets only the additional project details for all projects at once
Third request gets thread info to calculate response rates and times
Fourth request gets payment details only for awarded bids
Fifth request gets additional client details if needed
Minimizing Data Transfer:
Only specify the fields you actually need
Use filters to limit results (date ranges, status filters)
Batch multiple IDs in single requests
Data Relationships
Project → Client: project_owner_id is the client_id
Bid → Project: bid.project_id matches project.id
Thread → Bid: thread.context.id matches bid.project_id
Milestone → Bid: milestone.bid_id matches bid.id
API Usage Notes
All timestamps are Unix format (seconds since epoch)
Batch requests where possible by using arrays of IDs
Use sorting parameters to get most relevant results first
Watch rate limiting headers to avoid hitting API limits
here is the folder that is named FetchDataPage which is responsible for making the api calls to get the data that i need

it has old code and needs to be made to the requirements given above

can you help me implement the changes for each file?

give me the new ascii tree of what files will go where and also tell me how can i improve logging of the progress bar or the log viewer to update as each api call is made, i also want to keep a track of how many api calls do get made as well, i want to store all the time without formatting it, so store it all in the unix epoch time stamp format, when i want to display it i will just a function to display it in a 12h format that will come from dateUtils.js